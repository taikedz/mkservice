#!/bin/bash

### Make a systemd service easily Usage:help
#
# Make a systemd service in one command
#
# 	mkservice [@USER] DESCRIPTION -- COMMAND ...
#
###/doc

### notest FUNCTION ARGUMENTS Usage:bbuild
#
# This function performs a simple test to see if the "BBSETTESTMODE" variable is set to the string "test mode"
#
# If so, it does NOT call the function. In all other cases, the function is called with the arguments.
#
# The purpose of this function is to allow a simple method to encourage testability: source notest.sh in your test script, and set the BBTESTMODE variable to "test mode" to prevent the script from running.
#
# Example test target script, "test_target.sh":
#
#	#%include notest.sh
#
# 	function action1 { ... }
#
# 	function action2 { ... }
#
# 	function main {
# 		action1
# 		action2
# 	}
#
# 	notest main "$@"
#
# Example test script:
#
# 	. ~/.local/lib/bbuild/notest.sh
# 	BBTESTMODE="test mode"
#
# 	# main will not run
# 	. test_target.sh
#
# 	action1 || echo failed action1
#
# 	action2 || echo failed action2
#
# You can source a file with this kind of structure without the risk of triggering its runtime. This allows the file to be sourced and tested safely.
#
###/doc

function notest {
	local funcall="$1"; shift

	if [[ "${BBTESTMODE:-}" != "test mode" ]]; then
		"$funcall" "$@"
	fi
}
#!/bin/bash


MODE_DEBUG=no
MODE_DEBUG_VERBOSE=no

### debuge MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "yes"
###/doc
function debuge {
	if [[ "$MODE_DEBUG" = yes ]]; then
		echo -e "${CBBLU}DEBUG:$CBLU$*$CDEF" 1>&2
	fi
}

### infoe MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function infoe {
	echo -e "$CGRN$*$CDEF" 1>&2
}

### warne MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function warne {
	echo -e "${CBYEL}WARN:$CYEL $*$CDEF" 1>&2
}

### faile [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function faile {
	local ERCODE=127
	local numpat='^[0-9]+$'

	if [[ "$1" =~ $numpat ]]; then
		ERCODE="$1"; shift
	fi

	echo "${CBRED}ERROR FAIL:$CRED$*$CDEF" 1>&2
	exit $ERCODE
}

function dumpe {
	echo -n "[1;35m$*" 1>&2
	echo -n "[0;35m" 1>&2
	cat - 1>&2
	echo -n "[0m" 1>&2
}

function breake {
	if [[ "$MODE_DEBUG" != yes ]]; then
		return
	fi

	read -p "${CRED}BREAKPOINT: $* >$CDEF " >&2
	if [[ "$REPLY" =~ $(echo 'quit|exit|stop') ]]; then
		faile "ABORT"
	fi
}

### Auto debug Usage:main
# When included, bashout processes a special "--debug" flag
#
# It does not remove the debug flag from arguments.
###/doc

if [[ "$*" =~ --debug ]]; then
	MODE_DEBUG=yes

	if [[ "$MODE_DEBUG_VERBOSE" = yes ]]; then
		set -x
	fi
fi
#!/bin/bash

### Colours for bash Usage:bbuild
# A series of colour flags for use in outputs.
#
# Example:
# 	
# 	echo "${CRED}Some red text ${CBBLU} some blue text $CDEF some text in the terminal's default colour"
#
# Colours available:
#
# CDEF -- switches to the terminal default
#
# CRED, CBRED -- red and bright/bold red
# CGRN, CBGRN -- green and bright/bold green
# CYEL, CBYEL -- yellow and bright/bold yellow
# CBLU, CBBLU -- blue and bright/bold blue
# CPUR, CBPUR -- purple and bright/bold purple
#
###/doc

export CRED="[31m"
export CGRN="[32m"
export CYEL="[33m"
export CBLU="[34m"
export CPUR="[35m"
export CBRED="[1;31m"
export CBGRN="[1;32m"
export CBYEL="[1;33m"
export CBBLU="[1;34m"
export CBPUR="[1;35m"
export CDEF="[0m"
### Helper for version management Usage:bbuild
# Requires a version.bbuild in the current directory to work
###/doc

#%VERSIONFILE
BBVERSION_MAJOR=1
BBVERSION_MINOR=0
BBVERSION_POINT=0
BBVERSION_FLAG=dev
BBVERSION_PROGRAM=mkservice
BBVERSION_BUILDDATE=2017-07-06
BBVERSION_BUILD=8

function bbns_version_infoe {
	type infoe 2>&1|if grep 'not found' -q; then
		echo "$*"
	else
		infoe "$*"
	fi
}

function bbns_version_showversion {
	bbns_version_infoe "$BBVERSION_PROGRAM : $(bbns_version_genversion)"
	exit
}

function bbns_version_genversion {
	echo "$BBVERSION_MAJOR.$BBVERSION_MINOR.$BBVERSION_POINT ($BBVERSION_FLAG build $BBVERSION_BUILD) $BBVERSION_BUILDDATE"
}

if [[ "$*" =~ --version ]]; then
	bbns_version_showversion
fi
#!/bin/bash

### printhelp Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from a running script, call the
# `printhelp` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
###/doc

CHAR='#'

function printhelp {
	local USAGESTRING=help
	local TARGETFILE=$0
	if [[ -n "$*" ]]; then USAGESTRING="$1" ; shift; fi
	if [[ -n "$*" ]]; then TARGETFILE="$1" ; shift; fi

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$CHAR$CHAR$CHAR"'\s+(.+?)\s+Usage:'"$USAGESTRING"'\s*$'
        local SECEND='^\s*'"$CHAR$CHAR$CHAR"'\s*/doc\s*$'
        local insec="$(mktemp --tmpdir)"; rm "$insec"
        cat "$TARGETFILE" | while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        touch "$insec"
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"
                elif [[ -f $insec ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                rm "$insec"
                        else
				echo "$secline" | sed -r "s/^\s*$CHAR//g"
                        fi
                fi
        done
        if [[ -f "$insec" ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
		rm "$insec"
        fi
	echo ""
}

### automatic help Usage:main
#
# automatically call help if "--help" is detected in arguments
#
###/doc
if [[ "$@" =~ --help ]]; then
	cols="$(tput cols)"
	printhelp | fold -w "$cols" -s
	exit 0
fi
#!/bin/bash

### AskUser Usage:bbuild
# Present the user with questions on stdout
###/doc


yespat='^(yes|YES|y|Y)$'
numpat='^[0-9]+$'
rangepat='[0-9]+,[0-9]+'
blankpat='^ *$'

### uconfirm Usage:bbuild
# Ask the user to confirm a closed question. Defaults to no
#
# returns 0 on successfully match 'y' or 'yes'
# returns 1 otherwise
###/doc
function uconfirm {
	read -p "$* [y/N] > " 1>&2
	if [[ "$REPLY" =~ $yespat ]]; then
		return 0
	else
		return 1
	fi
}

### uask Usage:bbuild
# Ask the user to provide some text
#
# returns the entered text
###/doc
function uask {
	read -p "$* : " 1>&2
	echo $REPLY
}

### uchoose_multi Usage:bbuild
# Allows the user to choose from multiple choices
#
# uchose_multi MESG CHOICESTRING
#
#
# MESG is a single string token that will be displayed as prompt
#
# CHOICESTRING is a comma-separated, or newline separated, or "\\n"-separated token string
#
# Equivalent strings include:
#
# * `"a\\nb\\nc"` - quoted and explicit newline escapes
# * `"a,b,c"` - quoted and separated with commas
# * `a , b , c` - not quoted, separated by commas
# * (and `a`, `b` and `c` on their own lines)
#
# User input:
#
# User can choose by selecting
#
# * a single item by number
# * a range of numbers (4,7 for range 4 to 7)
# * or a string that matches the pattern
#
# All option lines that match will be returned, one per line
#
# If the user selects nothing, then function returns 1 and an empty stdout
###/doc
function uchoose_multi {
	local mesg=$1; shift
	local choices=$(echo "$*"|sed -r 's/ *, */\n/g')
	debuge "CHOICES: $choices"

	infoe "$mesg:" 
	echo -e "$choices"|egrep '^' -n| sed 's/:/: /' 1>&2
	
	local sel=$(uask "Choice")
	if [[ "$sel" =~ $blankpat ]]; then
		return 1
	elif [[ "$sel" =~ $numpat ]] || [[ "$sel" =~ $rangepat ]]; then
		debuge "Number choice [$sel]"
		echo -e "$choices" | sed -n "$sel p"
	else
		debuge "Pattern choice [$sel]"
		echo -e "$choices"  |egrep "$(echo "$sel"|tr " " '|')"
	fi
	return 0
}

### uchoose Usage:bbuild
# Ask the user to choose an item
#
# Like uchoose_multi, but will loop if the user selects more than one item
#
# If the provides no entry, returns 0
#
# If the user chooses one item, that item is echoed to stdout
###/doc
function uchoose {
	local mesg=$1; shift
	while true; do
		local thechoice="$(uchoose_multi "$mesg" "$*")"
		local lines=$(echo "$thechoice" | wc -l)
		if [[ $lines = 1 ]]; then
			echo "$thechoice"
			return 0
		else
			warne "Too many results"
		fi
	done
}

#!/bin/bash

### Varify Usage:bbuild
# Make a string into a valid variable name or file name
#
# Replaces any string of invalid characters into a "_"
#
# Valid characters for varify_var are:
#
# * a-z
# * A-Z
# * 0-9
# * underscore ("_")
#
# Valid characters for varify_fil are as above, plus:
#
# * dash ("-")
# * period (".")
#
# Can be used to produce filenames.
###/doc

function varify_var {
	echo "$*" | sed -r 's/[^a-zA-Z0-9_]/_/g'
}

function varify_fil {
	echo "$*" | sed -r 's/[^a-zA-Z0-9_.-]/_/g'
}
S_USER=nobody
S_RESTART=always
S_AFTER=network.target
S_WANTEDBY=default.target

S_OVERWRITE=false

parse_arguments() {
	while [[ -n "$*" ]]; do
		local token="$1"; shift

		case "$token" in
		-d)
			S_DESCRIPTION="$1"; shift
			;;
		-u)
			S_USER="$(varify_var "$1")"; shift
			;;
		-r)
			S_RESTART="$(validate_restart "$1")"
			;;
		-n)
			S_SERVICENAME="$(varify_fil "$1")"; shift
			;;
		-a)
			S_AFTER="$1"; shift
			;;
		-w)
			S_WANTEDBY="$1"; shift
			;;
		--overwrite)
			S_OVERWRITE=true
			;;
		-f)
			S_SERVICEFILE="$1"; shift
			;;
		--)
			S_COMMAND=("$@")
			return
			;;
		esac
	done
}

validate_restart() {
	local rpat="^(always|on-fail|never)$"
	local rpolicy="$1"; shift

	[[ "$rpolicy" =~ $rpat ]] && echo "$rpolicy" || faile "Invalid restart policy $rpolicy"
}

verify_arguments() {
	( [[ -n "${S_DESCRIPTION:-}" ]] &&
	  [[ -n "${S_COMMAND:-}" ]] &&
	  [[ -n "${S_SERVICENAME:-}" ]] ) || faile "Not enough information. Please see 'mkservice --help' for more info"
}

set -euo pipefail

stringify() {
	# Reinstate any doublequotes
	local commandstring=""

	for token in "$@"; do
		[[ "$token" =~ ' ' ]] && token='"'"$token"'"'
		commandstring="$commandstring$token "
	done
	echo "$commandstring"
}

extract_name() {
	local username="nobody"

	[[ "$1" =~ ^@ ]] && {
		username="${1:1}"
	}

	egrep -q "^$username:" /etc/passwd || faile "Invalid user."

	echo "$username"
}

extract_description() {
	local desciption=""

	[[ "$1" = -- ]] && faile "Please supply a description"

	while [[ "$1" != -- ]] && [[ -n "$1" ]]; do
		description="${description}$1 "
		shift
	done

	echo "$description"
}

check_bin() {
	local S_BIN="$1"; shift
	
	[[ "$S_BIN" =~ ^/ ]] || faile "Invalid command '$S_BIN' - use an absolute path"
	[[ -f "$S_BIN" ]] || faile "Invalid command '$S_BIN' - file not found"
}

write_servicefile() {
	local tmpfile="$(mktemp)"

cat <<EOF > "$tmpfile"
[Unit]

Description=$S_DESCRIPTION
After=$S_AFTER

[Service]
ExecStart=$S_COMMANDSTRING
User=$S_USER
Restart=$S_RESTART
PIDFile=/run/$S_SERVICENAME.pid

[Install]
WantedBy=$S_WANTEDBY
EOF

	mv "$tmpfile" "$S_SERVICEFILE"
	chmod 644 "$S_SERVICEFILE"
}

makeservice() {
	[[ "$UID" = 0 ]] || faile "You need to be root to run this script."

	parse_arguments "$@"
	verify_arguments

	S_COMMANDSTRING="$(stringify "$S_COMMAND")"
	check_bin "${S_COMMAND[0]}"

	[[ -n "${S_SERVICEFILE:-}" ]] || S_SERVICEFILE="/etc/systemd/system/$S_SERVICENAME.service"

	[[ ! -f "$S_SERVICEFILE" ]] || {
		warne "That service already exists."

		if [[ "${S_OVERWRITE:-}" != 'true' ]]; then
			uconfirm "Overwrite ?" || faile Aborted
		fi
	}


	infoe "Configured service $S_SERVICENAME"
	infoe "Adjust it at ${CBBLU}$S_SERVICEFILE"
	infoe "Activate it using\n\tsystemctl enable $S_SERVICENAME\n\tsystemctl start $S_SERVICENAME"
}

notest makeservice "$@"
