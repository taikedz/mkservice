#!/bin/bash

#%include help.sh

#%include notest.sh bashout.sh colours.sh version.sh askuser.sh varify.sh
#%include arguments.sh

set -euo pipefail

stringify() {
	# Reinstate any doublequotes
	local commandstring=""

	for token in "$@"; do
		[[ "$token" =~ ' ' ]] && token='"'"$token"'"'
		commandstring="$commandstring$token "
	done
	echo "$commandstring"
}

check_bin() {
	local S_BIN="$1"; shift
	
	[[ "$S_BIN" =~ ^/ ]] || faile "Invalid command '$S_BIN' - use an absolute path"
	[[ -f "$S_BIN" ]] || faile "Invalid command '$S_BIN' - file not found"
}

write_servicefile() {
	local tmpfile="$(mktemp)"

cat <<EOF > "$tmpfile"
[Unit]

Description=$S_DESCRIPTION
After=$S_AFTER

[Service]
ExecStart=$S_COMMANDSTRING
User=$S_USER
Restart=$S_RESTART
PIDFile=/run/$S_SERVICENAME.pid

[Install]
WantedBy=$S_WANTEDBY
EOF

	mv "$tmpfile" "$S_SERVICEFILE"
	chmod 644 "$S_SERVICEFILE"
}

makeservice() {
	[[ "$UID" = 0 ]] || faile "You need to be root to run this script."

	parse_arguments "$@"
	verify_arguments

	S_COMMANDSTRING="$(stringify "${S_COMMAND[@]}")"
	check_bin "${S_COMMAND[0]}"

	[[ -n "${S_SERVICEFILE:-}" ]] || S_SERVICEFILE="/etc/systemd/system/$S_SERVICENAME.service"

	[[ ! -f "$S_SERVICEFILE" ]] || {
		warne "That service already exists."

		if [[ "${S_OVERWRITE:-}" != 'true' ]]; then
			uconfirm "Overwrite ?" || faile Aborted
		fi
	}

	write_servicefile


	infoe "Configured service $S_SERVICENAME"
	infoe "Adjust it at ${CBBLU}$S_SERVICEFILE"
	infoe "Activate it using\n\tsystemctl enable $S_SERVICENAME\n\tsystemctl start $S_SERVICENAME"
}

notest makeservice "$@"
